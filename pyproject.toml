[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = "Josh", email = "josh@joshthomas.dev"}
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: Django",
  "Framework :: Django :: 3",
  "Framework :: Django :: 3.2",
  "Framework :: Django :: 4",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython"
]
dependencies = [
  "django>=3.2",
  "django_q2>=1.4.3"
]
description = "A Django app to register Django Q tasks."
dynamic = ["version"]
keywords = []
license = {file = "LICENSE"}
name = "django-q-registry"
readme = "README.md"
requires-python = ">=3.8"

[project.optional-dependencies]
dev = [
  "bumpver",
  "coverage[toml]",
  "django-stubs",
  "django-stubs-ext",
  "faker",
  "hatch",
  "mypy",
  "model-bakery",
  "nox",
  "pytest",
  "pytest-cov",
  "pytest-django",
  "pytest-randomly",
  "pytest-reverse",
  "pytest-xdist"
]
docs = [
  "cogapp",
  "furo",
  "myst-parser",
  "sphinx",
  "sphinx-autobuild",
  "sphinx-copybutton",
  "sphinx-inline-tabs"
]
lint = ["pre-commit"]

[project.urls]
Documentation = "https://github.com/joshuadavidthomas/django-q-registry#readme"
Issues = "https://github.com/joshuadavidthomas/django-q-registry/issues"
Source = "https://github.com/joshuadavidthomas/django-q-registry"

[tool.bumpver]
commit = true
commit_message = ":bookmark: bump version {old_version} -> {new_version}"
current_version = "0.1.0"
push = false  # set to false for CI
tag = false
version_pattern = "MAJOR.MINOR.PATCH[PYTAGNUM]"

[tool.bumpver.file_patterns]
"src/django_q_registry/__init__.py" = [
  '__version__ = "{version}"'
]
"tests/test_version.py" = [
  'assert __version__ == "{version}"'
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if DEBUG:",
  "if not DEBUG:",
  "if settings.DEBUG:",
  "if TYPE_CHECKING:",
  'def __str__\(self\)\s?\-?\>?\s?\w*\:'
]
fail_under = 75

[tool.coverage.run]
omit = [
  "tests/*"
]
source = ["django_q_registry"]

[tool.django-stubs]
django_settings_module = "tests.settings"
strict_settings = false

[tool.hatch.build]
exclude = [
  ".github/*",
  ".dockerfiles/*",
  ".dockerignore",
  ".editorconfig",
  ".pre-commit-config.yaml",
  "Justfile"
]

[tool.hatch.build.targets.wheel]
packages = ["src/django_q_registry"]

[tool.hatch.version]
path = "src/django_q_registry/__init__.py"

[tool.mypy]
check_untyped_defs = true
exclude = "docs/.*\\.py$"
mypy_path = "src/"
namespace_packages = false
no_implicit_optional = true
plugins = [
  "mypy_django_plugin.main"
]
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_errors = true
ignore_missing_imports = true
module = "tests.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "django_q.*"
]

[tool.mypy_django_plugin]
ignore_missing_model_attributes = true

[tool.pytest.ini_options]
addopts = "--create-db -n auto --dist loadfile --doctest-modules"
django_find_project = false
norecursedirs = ".* bin build dist *.egg htmlcov logs node_modules templates venv"
python_files = "tests.py test_*.py *_tests.py"
pythonpath = "src"
testpaths = ["tests"]

[tool.ruff]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915"
]
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT"
]
target-version = "py38"
unfixable = [
  # Don't touch unused imports
  "F401"
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
force-single-line = true
known-first-party = ["django_q_registry"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
